srcdir = @srcdir@
top_srcdir = @top_srcdir@
top_builddir =  .
abs_top_builddir = @abs_top_builddir@
builddir = @builddir@
subdir = .

AR = ar
RANLIB = @RANLIB@
CC = @CC@
CCDEP = @CCDEP@
CFLAGS = @CFLAGS@ 
LDFLAGS = @LDFLAGS@
DEPFLAGS = @DEPFLAGS@
CPPFLAGS = @CPPFLAGS@
CCLD = @CCLD@
LEX = @LEX@ 
AUTOCONF = @AUTOCONF@
LIBS = @LIBS@ 
SHELL = @SHELL@
OPTARGS = @OPTARGS@
SOPTARGS = @SOPTARGS@
DEFS = @DEFS@

INCLUDES = @INCLUDES@ 
LINK = $(CCLD) -o $@ ${LDFLAGS}
LINKLIBS = ${top_builddir}/linalg/liblinalg.a  \
	${top_builddir}/solver/libsolver.a
COMPILE = ${CC} $(DEFS) $(INCLUDES) -o $@ ${CFLAGS}

SMODULES = Hopping_Matrix_nocom Hopping_Matrix tm_operators

MODULES = read_input gamma hybrid_update observables start \
	expo 2mn_integrator get_staples update_backward_gauge \
	measure_rectangles get_rectangle_staples  \
	test/check_geometry test/check_xchange invert_eo \
	ext_integrator polyakov_loop getopt sighandler \
	source_generation boundary io update_tm ranlxd  \
	mpi_init linsolve deriv_Sb eigenvalues \
	xchange_deri geometry_eo linalg_eo \
	init_moment_field init_gauge_tmp  \
	derivative_psf xchange_field xchange_gauge \
	init_gauge_field init_geometry_indices init_spinor_field \
	init_dirac_halfspinor xchange_halffield stout_smear \
	init_stout_smear_vars stout_smear_force \
	derivative_nondegenerate Nondegenerate_Matrix \
        chebyshev_polynomial_nd Ptilde_nd  \
	init_chi_spinor_field init_chi_copy reweighting_factor_nd \
	init_bispinor_field eigenvalues_bi update_tm_nd D_psi \
	xchange_lexicfield


NOOPTMOD = test/check_xchange test/check_geometry

PROGRAMS = hmc_tm benchmark invert gwc2ildg \
	ildg2gwc single2double double2single reducenoise gen_sources 

ALLOBJ = ${MODULES} ${PROGRAMS} ${SMODULES} phmc_tm
SUBDIRS = linalg solver

.SUFFIXES:

ifneq (,$(findstring lapack,${LIBS}))
all: Makefile all-recursive dep hmc_tm invert gen_sources phmc_tm
else
all: Makefile all-recursive dep hmc_tm invert gen_sources
endif

.NOTPARALLEL: 

-include $(addsuffix .d,$(ALLOBJ))

include ${top_srcdir}/Makefile.global

ifneq (,$(findstring lex,${LEX}))
read_input.c: ${srcdir}/read_input.l
	${LEX} -i -t $< > ${srcdir}/read_input.c
endif

libhmc.a: ${addsuffix .o, ${MODULES} ${SMODULES}} Makefile
	@rm -f libhmc.a
	@${AR} cru libhmc.a ${addsuffix .o, ${MODULES} ${SMODULES}}
	@$(RANLIB) libhmc.a
	@cp libhmc.a ${top_builddir}/lib/libhmc.a

#${addsuffix .o, ${ALLOBJ}}: %.o: ${srcdir}/%.c %.d Makefile
#	${COMPILE} ${OPTARGS} -c $< 

$(addsuffix .o,$(filter-out ${NOOPTMOD},${MODULES})): %.o: ${srcdir}/%.c %.d Makefile
	${COMPILE} ${OPTARGS} -c $< 

#here we don't need optimisation
$(addsuffix .o,$(filter ${NOOPTMOD},${MODULES})): %.o: ${srcdir}/%.c %.d Makefile
	${COMPILE} -c $< 

${addsuffix .o, ${SMODULES}}: %.o: ${srcdir}/%.c %.d Makefile
	${COMPILE} ${SOPTARGS} -c $< 

${addsuffix .o, ${PROGRAMS} phmc_tm}: %.o: ${srcdir}/%.c %.d Makefile
	${COMPILE} ${OPTARGS} -c $<

${PROGRAMS}: %: %.o libhmc.a all-recursive
	 ${LINK}  $@.o $(LIBS)

phmc_tm: phmc_tm.o libhmc.a all-recursive
	 ${LINK}  $@.o $(LIBS)

dep: $(addsuffix .d,$(ALLOBJ))

compile-clean: compile-clean-recursive Makefile
	rm -f *.o *.d

clean: clean-recursive Makefile
	rm -f hmc_tm invert phmc_tm *.o *.d
distclean: distclean-recursive Makefile
	rm -f hmc_tm hybrid *.o *.d *~ Makefile config.log config.status fixed_volume.h
	rm -f phmc_tm
	rm -f config.h

.PHONY: all clean compile-clean distclean dep \
	flex_read_input ${PROGRAMS} all-recursive \
	all-debug-recursive all-profile-recursive \
	clean-recursive distclean-recursive \
	compile-clean-recursive $(LINKLIBS) \
	libhmc.a
