# $Id$
#
# Process this file with autoconf to produce a configure script
#
AC_PREREQ(2.53)
AC_INIT(HMC, 3.1.5, carsten.urbach@liverpool.ac.uk)
AC_CONFIG_HEADER(config.h)
AC_CONFIG_SRCDIR([hmc_tm.c])
AC_CANONICAL_HOST()
AC_PREFIX_DEFAULT($HOME)
AC_ARG_PROGRAM

if test "$host_cpu" = "powerpc" && test "$host_vendor" = "ibm"; then
  echo We are on a IBM Power PC, using xlc and xlC or mpcc/mpCC
  CC=xlc_r
  CXX=xlC_r
fi
if test "$host_vendor" = "cray"; then
  ac_cv_c_bigendian=yes
fi

AC_PROG_CC
AC_C_CONST
AC_PROG_LEX
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CHECK_PROG(CCDEP, gcc, "gcc", "$CC")
AC_C_BIGENDIAN
#(endian="", AC_DEFINE(LITTLE_ENDIAN,1,The endian of the architechture))

LIBS="-lm"
LDFLAGS="$LDFLAGS -L\$(HOME)/lib -L\$(top_builddir)/lib"

AC_CHECK_HEADERS([stdint.h],
[ dnl for inttypes.h and stdint.h for uint_xxx types
  dnl if successful check for the actual types too
  AC_CHECK_TYPES([uint16_t, uint32_t, uint64_t],
                 [],
                 [AC_MSG_ERROR([stdint.h found but either uint16_t, uint32_t or uint64_t not found]) ]
                )
],
[
  dnl no inttypes.h or stdint.h found check common unsigned types
  dnl for sizes and make appropriate decisions in the lime_fixed_types.h file
  AC_CHECK_SIZEOF(unsigned char)
  AC_CHECK_SIZEOF(unsigned short)
  AC_CHECK_SIZEOF(unsigned int)
  AC_CHECK_SIZEOF(unsigned long)
  AC_CHECK_SIZEOF(unsigned long long)
]
)

AC_MSG_CHECKING(where to find lime)
AC_ARG_WITH(limedir,
  [  --with-limedir[=dir]      search lime in dir [default=./lime]],
  lime_dir=$withval, lime_dir="./lime")
AC_MSG_RESULT($lime_dir)
LDFLAGS="$LDFLAGS -L${lime_dir}/lib/"
AC_CHECK_LIB([lime], [limeReaderNextRecord],[],
              [AC_MSG_ERROR([library liblime is missing or needed function is not available])])

AC_MSG_CHECKING(whether we want to use MPI)
AC_ARG_ENABLE(mpi,
  [  --enable-mpi            enable use of mpi [default=yes]],
  enable_mpi=$enableval, enable_mpi=yes)
if test $enable_mpi = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(MPI,1,Compile with MPI support)
else
  AC_MSG_RESULT(no)
fi 

if test $enable_mpi = yes; then
  AC_MSG_CHECKING(which parallelisation to use for MPI)
  AC_ARG_WITH(mpidimension,
    [  --with-mpidimension[=n]   use n dimensional parallelisation [default=1]],
    withmpidimension=$withval, withmpidimension=1)
  if test $withmpidimension = 1; then
    AC_MSG_RESULT(n=1 [t])
    AC_DEFINE(PARALLELT,1,One dimensional parallelisation)
  elif test $withmpidimension = 2; then
    AC_MSG_RESULT(n=2 [xt])
    AC_DEFINE(PARALLELXT,1,Two dimensional parallelisation)
  elif test $withmpidimension = 3; then
    AC_MSG_RESULT(n=3 [xyt])
    AC_DEFINE(PARALLELXYT,1,Three dimensional parallelisation)
  elif test $withmpidimension = 4; then
    AC_MSG_RESULT(n=4 [xyzt])
    AC_DEFINE(PARALLELXYZT,1,Four dimensional parallelisation)
  else
    AC_MSG_RESULT(unknown)
    AC_MSG_ERROR([Only one, two, three or four dimensional parallelisation available]) 
  fi
fi

AC_MSG_CHECKING([whether we want to fix volume at compiletime])
AC_ARG_WITH([fixedvolume],
  [  --with-fixedvolume      fix volume at compiletime [default=no]],
  with_fixvol=$withval, with_fixvol=no)
if test $with_fixvol = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(FIXEDVOLUME,1,Fixed volume at compiletime)
  AC_CONFIG_FILES([fixed_volume.h])
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether we want to use lapack and blas)
AC_ARG_WITH(lapack,
  [  --with-lapack           enable use of lapack [default=yes]],
  with_lapack=$withval, with_lapack=yes)
if test $with_lapack = yes; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

if test $enable_mpi = yes; then
# In general one cannot run mpi programs directly
# thats why we need here cross_compiling=yes
# for non CRAY
  if test "$host_vendor" != "cray"; then
    cross_compiling=yes
  fi
  if test "$host_cpu" = "powerpc" && test "$host_vendor" = "ibm"; then
    CC=mpcc_r
    CXX=mpCC_r
  elif test "$host_cpu" = "i686" || test "$host_cpu" = "x86_64"; then	
    AC_PATH_PROG(MPICC, mpicc, /usr/bin/mpicc, /opt/mpich/gnu3/bin:/opt/mpich/gnu/bin:$PATH)
    if test "$CC" = ""; then
      CC=$MPICC
    fi
    cross_compiling=yes
  fi
fi 

# for the case of other configure scripts
# AC_CONFIG_SUBDIRS( rng )

# Checks for libraries.
if test "$host_cpu" = "powerpc" && test "$host_vendor" = "ibm"; then
  if test $with_lapack = yes; then
    AC_CHECK_LIB(essl, zaxpy, ,AC_MSG_ERROR([libessl is missing or zaxpy not available]), -lf -lm )
    AC_CHECK_LIB(lapack, zheev, LP=yes;AC_DEFINE(HAVE_LAPACK,1,lapack available), LP="", -lessl -lblas -lf -lm )
  fi
#  AC_CHECK_LIB(arpack, zneupd, AP=yes, AP="", -lessl -llapack -lf -lm)
#  if test "$enable_mpi" = "yes"; then
#    AC_CHECK_LIB(parpack, pzneupd, PAP=yes, PAP="", -larpack -lessl -llapack -lf -lm)  
#  fi

elif test "$host_cpu" = "powerpc64" && test "$host_vendor" = "unknown" && test "$host_os" = "linux-gnu"; then
  if test $with_lapack = yes; then
    AC_CHECK_LIB(lapack, zheev, LP=yes, LP="", -lblas -lf77blas -latlas -lxlf90 -lxlfmath -lm)
    echo "We should check for lapack here... (Is LD_LIBRARY_PATH set correctly?)!"
  fi

elif test "$host_cpu" = "powerpc64" && test "$host_vendor" = "bgl" && test "$host_os" = "linux-gnu"; then
  if test $with_lapack = yes; then
    AC_CHECK_LIB(lapack, zheev, LP=yes, LP="", -lblas -lf77blas -latlas -lxlf90 -lxlfmath -lm)
    echo "We should check for lapack here... (Is LD_LIBRARY_PATH set correctly?)!"
  fi

elif test "$host_cpu" = "i686" || test "$host_cpu" = "x86_64"; then
  AC_CHECK_LIB(g2c, f__cabs, G2C=yes, G2C="")
  if test "$G2C" = yes; then
    F2C="-lg2c"
  fi
  AC_CHECK_LIB(gfortran, cabs, GFTR="yes", GFTR="")
  if test "$GFTR" = yes; then
    F2C="-lgfortran"
  fi
  if test "$GFTR" != yes && test "$G2C" != yes; then
    F2C="-lf2c_nomain_LINUX"
  fi

  if test $with_lapack = yes; then
    AC_CHECK_LIB(lapack, zheev_, LP=yes, LP="",  -lblas $F2C -lm)
    AC_CHECK_LIB(atlas, ATL_walltime, ATLAS=yes, ATLAS="")
  fi
else
  if test $with_lapack = yes; then
    AC_CHECK_LIB(lapack, zheev_, LP=yes, LP="", -lblas -lf -lm )	
  fi
fi

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([float.h libintl.h limits.h stdint.h stdlib.h string.h strings.h sys/time.h unistd.h])
AC_CHECK_HEADER( getopt.h, INCLUDES="//  " )

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME

# Checks for library functions.
#AC_FUNC_ERROR_AT_LINE
AC_SYS_LARGEFILE
AC_FUNC_FSEEKO
AC_FUNC_MALLOC
#AC_FUNC_REALLOC
AC_TYPE_SIGNAL
#AC_CHECK_FUNCS([gettimeofday memset modf pow sqrt])
AC_CHECK_FUNCS([gettimeofday pow sqrt])

# We now define some replace variables
AC_SUBST(OPTARGS)
AC_SUBST(INCLUDES)
AC_SUBST(AUTOCONF)
AC_SUBST(SOLVEROUT)
AC_SUBST(CCDEP)
AC_SUBST(DEPFLAGS)
AC_SUBST(DEBUG_FLAG)
AC_SUBST(PROFILE_FLAG)
#AC_SUBST(ARPACK)
#AC_SUBST(PARPACK)
AC_SUBST(F2C)
AC_SUBST(XCHANGELIB)
AC_SUBST(XCHANGEDIR)
AC_SUBST(XLIB)

INCLUDES=""
# in the following we check for extra options
if test "$host_cpu" = "i686" || test "$host_cpu" = "x86_64"; then

  AC_MSG_CHECKING(whether we want to use P4 instructions)
  AC_ARG_ENABLE(p4,
    [  --enable-p4             enable use of P4 instructions [default=yes]],
    enable_p4=$enableval, enable_p4=yes)
  if test $enable_p4 = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(P4,1,Use Pentium4 instructions)
#    AC_DEFINE(ALIGN_BASE,0x3f,[Align base])
  else
    AC_MSG_RESULT(no)
  fi

  AC_MSG_CHECKING(whether we want to use Opteron instructions)
  AC_ARG_ENABLE(opteron,
    [  --enable-opteron        enable use of Opteron instructions [default=no]],
    enable_opteron=$enableval, enable_opteron=no)
  if test $enable_opteron = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(OPTERON,1,Use Opteron instructions)
#    AC_DEFINE(ALIGN_BASE,0x0f,[Align base])
  else
    AC_MSG_RESULT(no)
  fi

  AC_MSG_CHECKING(whether we want to use SSE1 instructions)
  AC_ARG_ENABLE(sse,
    [  --enable-sse            enable use of SSE1 instructions [default=no]],
    enable_see=$enableval, enable_sse=no)
  if test $enable_sse = yes; then
    AC_MSG_RESULT(yes)
  else 
    if test $enable_sse = def; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
  fi

  AC_MSG_CHECKING(whether we want to use SSE2 instructions)
  AC_ARG_ENABLE(sse2,
    [  --enable-sse2           enable use of SSE2 instructions [default=yes]],
    enable_sse2=$enableval, enable_sse2=yes)
  if test $enable_sse2 = yes; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi

  AC_MSG_CHECKING(whether we want to use SSE3 instructions)
  AC_ARG_ENABLE(sse3,
    [  --enable-sse3           enable use of SSE3 instructions [default=no]],
    enable_sse3=$enableval, enable_sse3=no)
  if test $enable_sse3 = yes; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
fi

AC_MSG_CHECKING(whether solvers should output convergence information)
AC_ARG_ENABLE(solveroutput,
  [  --enable-solveroutput   enable solver convergence output [default=no]],
  enable_solveroutput=$enableval, enable_solveroutput=no)
if test $enable_solveroutput = yes; then
  AC_MSG_RESULT(yes)
  SOLVEROUT=-D_SOLVER_OUTPUT
  AC_DEFINE(_SOLVER_OUTPUT,1,Verbose solver output)
else
  AC_MSG_RESULT(no)
  SOLVEROUT=
fi

AC_MSG_CHECKING(whether we want to use gprof as profiler)
AC_ARG_WITH(gprof,
  [  --with-gprof            use of gprof profiler [default=yes]],
  enable_gprof=$withval, enable_gprof=yes)
if test $enable_gprof = yes; then
  AC_MSG_RESULT(yes)
    if test "$GCC" = yes; then
      PROFILE_FLAG="-pg -g"
    elif test "$host_cpu" = "powerpc" && test "$host_vendor" = "ibm"; then
      PROFILE_FLAG="-pg -qfullpath -g"
    else
      PROFILE_FLAG="-pg -g"
    fi
else
  AC_MSG_RESULT(no)
  PROFILE_FLAG=
fi


# Now we have to set als Flags and compiler properly
# first for PC's
if test "$host_cpu" = "i686" || test "$host_cpu" = "x86_64"; then
# the GNU compiler
  if test "$GCC" = yes; then
    DEPFLAGS="-MM"
    GCCVERSION1=`$CC -dumpversion | cut -d "." -f 1`
    GCCVERSION2=`$CC -dumpversion | cut -d "." -f 2`
# -march=pentium4
    if test $enable_mpi = yes; then
# Due to some standard problems in MPI header files
# no -pedantic-errors...
      CFLAGS="$CFLAGS -ansi -pedantic -Wall"
    else
      if test $GCCVERSION1 -gt 2 && test $enable_sse2 = yes; then
        CFLAGS="$CFLAGS -ansi -Wall -pedantic"
      else
	CFLAGS="$CFLAGS -ansi -Wall -pedantic"
      fi
    fi
    CXXFLAGS=' -Wall'
    OPTARGS='-O'


    if test "$host_cpu" != "x86_64"; then
      if test $enable_p4 = yes && ((test $GCCVERSION1 -gt 2 && test $GCCVERSION2 -gt 1) || test $GCCVERSION1 -gt 3); then
         CFLAGS="$CFLAGS -march=pentium4"
         SSE="sse2"
         DEPFLAGS="$DEPFLAGS"
      elif test $enable_p4 = yes && $GCCVERSION1 -gt 2; then
         CFLAGS="$CFLAGS -march=pentium"
         SSE="sse2"
         DEPFLAGS="$DEPFLAGS -DP4"
      elif test $enable_p4 = yes; then
         CFLAGS="$CFLAGS -mcpu=i686"
         DEPFLAGS="$DEPFLAGS -DP4"
      else
         CFLAGS="$CFLAGS -mcpu=i686"
      fi
    else
      if test $enable_opteron = yes; then
        CFLAGS="$CFLAGS -march=opteron"
        SSE="sse2"
      fi
    fi

    if test $enable_sse3 = yes; then
      echo Using SSE3 and SSE2 macros!
      SSE="sse3"
      AC_DEFINE(SSE3,1,Compile with SSE3 support)
      DEPFLAGS="$DEPFLAGS -DSSE3"
      if test "$host_cpu" = "x86_64"; then
        CFLAGS="$CFLAGS -mfpmath=387"
      fi
    elif test $enable_sse2 = yes && test $enable_sse = no; then
      echo Using SSE2 macros!
      DEPFLAGS="$DEPFLAGS -DSSE2"
      SSE="sse2"
      AC_DEFINE(SSE2,1,Compile with SSE2 support)
      if test "$host_cpu" = "x86_64"; then
        CFLAGS="$CFLAGS -mfpmath=387"
      fi
    elif test $enable_sse = yes; then
      echo Using SSE macros!
      DEPFLAGS="$DEPFLAGS -DSSE"
      SSE="sse"
      AC_DEFINE(SSE,1,Compile with SSE support)
    fi

    if test "$host_cpu" != "x86_64"; then
      CFLAGS="$CFLAGS -malign-double -fomit-frame-pointer -ffloat-store"
      CXXFLAGS="$CXXFLAGS -mcpu=i686 -O -malign-double -fomit-frame-pointer -ffloat-store"
    else
      CFLAGS="$CFLAGS -fomit-frame-pointer -ffloat-store"
      CXXFLAGS="$CXXFLAGS -O -fomit-frame-pointer -ffloat-store"
      AC_DEFINE(_x86_64,1,x86 64 Bit architecture)
    fi
    CCDEP="$CC"
    if test $enable_mpi = yes; then
      CCDEP="gcc"
    fi 
    DEBUG_FLAG="-g"
# other compiler
  else
# check for pgcc
    PGCC=`$CC -V 2>&1 | grep pgcc`
    ICC=`$CC -V 2>&1 | grep -i intel`
    if test "$PGCC" != ""; then
      DEPFLAGS="-M"
      echo "We are using the Portland Group C compiler!"
      CFLAGS="$CFLAGS -Mdalign -fastsse"
      if test $enable_p4 = "yes"; then
	SSE="sse2"
      fi
      OPTARGS="-O2"
      DEBUG_FLAG="-g"
      PROFILE_FLAG="-p -g"
      CCDEP="$CC"

# check for icc    
    elif test "$ICC" != ""; then
      echo "We are using the Intel C compiler!"
      DEPFLAGS="-M"
      CFLAGS="$CFLAGS -Wall -w1"
      if test $enable_p4 = "yes"; then
        CFLAGS="$CFLAGS -march=pentium4"
	SSE="sse2"
      fi
      OPTARGS="-O3"
      DEBUG_FLAG="-g"
      PROFILE_FLAG="-p -g"
      CCDEP="$CC"

    else
      DEPFLAGS="-M"
      CFLAGS="$CFLAGS -O"
      DEBUG_FLAG="-g"
      CCDEP="$CC"
    fi
  fi
  if test $with_lapack = yes; then
    LDFLAGS="$LDFLAGS -L\$(top_srcdir)/lapack"
    AC_DEFINE(HAVE_LAPACK,1,lapack available)
    if test "$LP" = "yes" && test "$host_cpu" != "x86_64"; then
      if test "$ATLAS" = "yes"; then
        LIBS="-llapack -lf77blas -latlas $LIBS"
      else
        LIBS="-llapack -lblas $LIBS"
      fi
    else
      if test "$SSE" = "sse2" || test "$SSE" = "sse3"; then
        if test "$host_cpu" != "x86_64"; then
          LIBS="-llapack_LINUXSSE2P4 -lf77blas_LINUXSSE2P4 -latlas_LINUXSSE2P4 $LIBS"
        else
          LIBS="-llapack_LINUXHAMMER64SSE2 -lf77blas_LINUXHAMMER64SSE2 -latlas_LINUXHAMMER64SSE2 $LIBS"
        fi
      else
        if test "$host_cpu" != "x86_64"; then
          LIBS="-llapack_LINUX -lblas_LINUX $LIBS"
        else
          LIBS="-llapack_LINUX64 -lblas_LINUX64 $LIBS"
        fi
      fi
    fi
    LIBS="$LIBS $F2C"
  fi

# The MareNostrum: powerpc on a linux system
elif test "$host_cpu" = "powerpc64" && test "$host_vendor" = "unknown" && test "$host_os" = "linux-gnu"; then
  AC_DEFINE(NOF77_,1,Fortran has not extra _)
  DEBUGFLAG="-g"
  if test "$GCC" != yes; then
    CFLAGS="-qsrcmsg $CFLAGS"
    DEBUGFLAG="$DEBUGFLAG -qfullpath"
    XLC=yes
    AC_DEFINE(XLC,1,Are we using the IBM xlc compiler?)
  fi

  LDFLAGS="$LDFLAGS -L/bgl/BlueLight/ppcfloor/bglsys/lib"
  if test $with_lapack = yes; then
    LIBS="-llapack -lblas -lf77blas -latlas -lxlf90 -lxlfmath $LIBS"
  fi

  OPTARGS="-O3"
  if test "$CCDEP" = "gcc"; then
    DEPFLAGS="-MM"
  else
    DEPFLAGS="-M"
  fi

#The BLue Gene/L
elif test "$host_cpu" = "powerpc64" && test "$host_vendor" = "bgl" && test "$host_os" = "linux-gnu"; then
  CFLAGS="$CFLAGS"
  AC_DEFINE(NOF77_,1,Fortran has not extra _)
  DEBUGFLAG="-g"
  OPTARGS="-O3"
  AC_DEFINE(BGL,1,[Optimize for Blue Gene/L])

  if test "$GCC" != yes; then
    CFLAGS="-qsrcmsg -qarch=440d -qtune=440 $CFLAGS"
    DEBUGFLAG="$DEBUGFLAG -qfullpath"
    OPTARGS="-O3"
# OPTARGS="-qhot" leads to wrong code
    XLC=yes
    AC_DEFINE(XLC,1,Are we using the IBM xlc compiler?)
  fi
  LIBS="-lmpich.rts -lmsglayer.rts -lrts.rts -ldevices.rts $LIBS"
  if test $with_lapack = yes; then
    LIBS="-llapack440 -lblas440 -lxlf90 -lxlfmath $LIBS"
  fi
  LDFLAGS="$LDFLAGS -L/bgl/BlueLight/ppcfloor/bglsys/lib"

  if test "$CCDEP" = "gcc"; then
    DEPFLAGS="-MM"
  else
    DEPFLAGS="-M"
  fi
  INCLUDES="$INCLUDES -I/bgl/BlueLight/ppcfloor/bglsys/include/"


# The IBM Power PC
elif test "$host_cpu" = "powerpc" && test "$host_vendor" = "ibm"; then
  CFLAGS="$CFLAGS -q64 -qsrcmsg"
  AC_DEFINE(NOF77_,1,Fortran has no extra _)
  if test $with_lapack = yes; then
    LIBS="-lessl -llapack -lblas -lf $LIBS"
  fi
  LDFLAGS="$LDFLAGS -q64"
  XLC=yes
  AC_DEFINE(XLC,1,Are we using the IBM xlc compiler?)
  OPTARGS="-O3 -qhot"
  DEBUG_FLAG="-qfullpath -g"
  if test "$CCDEP" = "gcc"; then
    DEPFLAGS="-MM"
  else
    DEPFLAGS="-M"
  fi

# The CRAY
elif test "$host_vendor" = "cray"; then
  echo
  echo "Hey, we are on the cray, you should take some time for this..."
  echo
  CFLAGS="$CFLAGS -dp"
  AC_DEFINE(CRAY,1,We are on a CRAY)
  OPTARGS="-O3"
  DEBUG_FLAG="-g"
  CCDEP="$CC"
  DEPFLAGS="-M"

else
  echo
  echo "Warning! Unknown platform... Using standard parameters"
  echo
  AC_CHECK_PROG(CCDEP, gcc, "gcc", "$CC")
  if test "$CCDEP" = "gcc"; then
    DEPFLAGS="-MM"
  else
    DEPFLAGS="-M"
  fi

  if test $with_lapack = yes; then
    LIBS="-llapack -lblas -lf $LIBS"
  fi
fi


AC_MSG_CHECKING(whether we want to switch on optimisation)
AC_ARG_ENABLE(optimize,  
  [  --enable-optimize       enable optimisation [default=yes]],
  enable_optimize=$enableval, enable_optimize=yes)
if test $enable_optimize = no; then
  AC_MSG_RESULT(no)
  OPTARGS=
else
  AC_MSG_RESULT(yes)
fi

AC_MSG_CHECKING(whether we want to use a copy of the gauge field)
AC_ARG_ENABLE(gaugecopy,
  [  --enable-gaugecopy      enable use of a copy of the gauge field [default=yes]],
  enable_gaugecopy=$enableval, enable_gaugecopy=yes)
if test $enable_gaugecopy = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(_GAUGE_COPY,1,Construct an extra copy of the gauge fields)
else
  AC_MSG_RESULT(no)
fi

#AC_MSG_CHECKING(whether we want to use EO geometry for gauge fields)
#AC_ARG_ENABLE(eogeom,
#  [  --enable-eogeom         enable use of EO geometry for gauge fields [default=yes]],
#  enable_eogeom=$enableval, enable_eogeom=yes)
#if test $enable_eogeom = yes; then
#  AC_MSG_RESULT(yes)
#  AC_DEFINE(_NEW_GEOMETRY,1,Use even/odd geometry in the gauge fields)
#else
#  AC_MSG_RESULT(no)
#fi

# create the lib directory here
if test ! -e lib; then
  mkdir lib
fi

# create the test directory here
if test ! -e test; then
  mkdir test
fi

INCLUDES="$INCLUDES -I\$(HOME)/include/ -I. -I\${top_builddir}/  -I\${top_srcdir}/ -I${lime_dir}/include/ -I../lime/include/"
LIBS="-lsolver -llinalg $LIBS"
AUTOCONF=autoconf

#AC_CONFIG_SUBDIRS(lime)

AC_CONFIG_FILES([Makefile
                 linalg/Makefile
	         solver/Makefile])

AC_OUTPUT
