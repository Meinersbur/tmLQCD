Benchmark of the even-odd preconditioned Dirac operator

Example command to compile the program you can find at the end of this
file. You may paste them into a file ccc and use this to compile the
benchmark tool.

The examples from below need to be edited in order to give the proper path for
the mpicc or cc. Maybe also the compile-option has to be adopted.
In particular
-DSSE2 -DP4  
should only be given for a Pentium4 (R) system.
And
-DSSE2 -DOPTERON
should only be given for a AMD Opteron (R) system. -DSSE2 is tested
only to work with the gnu compiler.

You should allways set -D_GAUGE_COPY and -D_NEW_GEOMERY.

There are two different parallelisations available, a one dimensionale
parallelisation (set -DMPI -DPARALLELT) and a two dimensional
parallelisation (set -DMPI -DPARALLELXT). 
If none of them are used, you will get a serial version of the program.

The local lattice size in the case of the one dimensional
prallelisation is controlled by the parameters 

#define T   2
#define L  16

which will give a 2 x 16^3 local lattice, the total size of the
lattice is given by 

(number of processes) times T  times L^3

In the two dimensional parallelisation by

#define T   2
#define L  16
#define N_PROC_X 2

which will give a 2 x 8 x 16^2 local lattice. In this case the total
size of the lattice is given by

(number of processes)/N_PROC_X times T  times L^3 .

They can all be found in the file global.h . These are the only things
you should touch in the program. L should be even. also (number of processes) should
be even.

the package size of the data that are send and recieved is 
192 * (1/2) * L^3 Byte in case of the one dimensional parallelisation.
In case of the two dimensional parallelisation it is
192 * (1/2) ((L*L*L/N_PROC_X)+(T*L*L)) Byte.

A run of the benchmark takes about one minute.

The out-put of the program is: (T=2,L=16 on lattice in Hamburg)

The number of processes is 12 
The local lattice size is 2 x 16 ^3 
total time 4.681349e+00 sec, Variance of the time 6.314982e-03 sec 

 (297 Mflops [64 bit arithmetic])

communication switched off 
 (577 Mflops [64 bit arithmetic])

The size of the package is 393216 Byte 
The bandwidth is 84.49 + 84.49   MB/sec


If you use the serial version of course the part depending on the
parallel setup will be missing.


Compilation command:

in general 
cc -I. -I./ -I.. -o benchmark -D_GAUGE_COPY -D_NEW_GEOMETRY -O Hopping_Matrix.c mpi_init.c geometry_eo.c test/check_xchange.c test/check_geometry.c boundary.c start.c ranlxd.c benchmark.c -lm

gcc and OPTERON (64 Bit architecture):
gcc -I. -I./ -I.. -o benchmark -ansi -Wall -DOPTERON -DSSE2 -mfpmath=387 -fomit-frame-pointer -ffloat-store -D_GAUGE_COPY -D_NEW_GEOMETRY -O Hopping_Matrix.c mpi_init.c geometry_eo.c test/check_xchange.c test/check_geometry.c boundary.c start.c ranlxd.c benchmark.c -lm

gcc and pentium4:
gcc -I. -I./ -I.. -o benchmark -ansi -Wall -DSSE2 -DP4 -march=pentium4  -malign-double -fomit-frame-pointer -ffloat-store -D_GAUGE_COPY -D_NEW_GEOMETRY -O Hopping_Matrix.c mpi_init.c geometry_eo.c test/check_xchange.c test/check_geometry.c boundary.c start.c ranlxd.c benchmark.c -lm

mpicc (gcc) and pentium4 and _one_ dimensional parallelisation:
gcc -I. -I./ -I.. -o benchmark -ansi -Wall -DSSE2 -DP4 -DMPI -DPARALLELT -march=pentium4  -malign-double -fomit-frame-pointer -ffloat-store -D_GAUGE_COPY -D_NEW_GEOMETRY -O Hopping_Matrix.c mpi_init.c geometry_eo.c test/check_xchange.c test/check_geometry.c boundary.c start.c ranlxd.c benchmark.c -lm

mpicc (gcc) and pentium4 and _two_ dimensional parallelisation:
gcc -I. -I./ -I.. -o benchmark -ansi -Wall -DSSE2 -DP4 -DMPI -DPARALLELXT -march=pentium4  -malign-double -fomit-frame-pointer -ffloat-store -D_GAUGE_COPY -D_NEW_GEOMETRY -O Hopping_Matrix.c mpi_init.c geometry_eo.c test/check_xchange.c test/check_geometry.c boundary.c start.c ranlxd.c benchmark.c -lm

xlc and IBM powerpc:
xlc -I. -I./ -I.. -o benchmark -q64 -qsrcmsg -DXLC -D_GAUGE_COPY -D_NEW_GEOMETRY -O3 -qhot  Hopping_Matrix.c mpi_init.c geometry_eo.c test/check_xchange.c test/check_geometry.c boundary.c start.c ranlxd.c benchmark.c -lm
